// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, created_at, updated_at)
VALUES (
    gen_random_uuid(), $1, $2, NOW(), NOW()
)
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const truncateUsers = `-- name: TruncateUsers :exec
TRUNCATE TABLE users RESTART IDENTITY
`

func (q *Queries) TruncateUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateUsers)
	return err
}
