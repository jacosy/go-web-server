// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, hashed_password, created_at, updated_at)
VALUES (
    gen_random_uuid(), $1, $2, $3, NOW(), NOW()
)
RETURNING id, username, email, created_at, updated_at
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID        uuid.UUID
	Username  string
	Email     string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, hashed_password, created_at, updated_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID
	Username       string
	Email          string
	HashedPassword string
	CreatedAt      sql.NullTime
	UpdatedAt      sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}

const truncateUsers = `-- name: TruncateUsers :exec
TRUNCATE TABLE users RESTART IDENTITY
`

func (q *Queries) TruncateUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateUsers)
	return err
}
